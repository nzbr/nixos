#!@powershell@/bin/pwsh
# code: language=powershell tabSize=4

if (!(Get-Item -Path "./flake.nix" -ErrorAction SilentlyContinue)) {
    Write-Error "No flake.nix found in the current directory"
    exit 1
}

# TODO: Use argparse
if ($args.Length -lt 1) {
    Write-Error "No target specified"
    exit 1
}

if ($args.Length -lt 2) {
    Write-Error "No action specified"
    exit 1
}

$hosts = $args[0].Split(",")
[array]::Sort($hosts)

$config = (&"@nixFlakes@/bin/nix-instantiate" --eval --strict -E --json @"
  let
    flake = builtins.getFlake (toString ./.);
    lib = flake.lib;
  in
  with builtins; with lib;
  mapAttrs
    (n: v:
      v.config.nzbr.deployment
      //
      (mapAttrs
        (n': v': v'.config.nzbr.deployment)
        (filterAttrs
          (n': v': v' ? config && v'.config ? nzbr && v'.config.nzbr ? deployment)
          v
        )
      )
    )
    (filterAttrs (n: v: v.config ? nzbr && v.config.nzbr ? deployment) flake.nixosConfigurations)
"@ | ConvertFrom-Json)

$to_build = ($hosts | % { ".#nixosConfigurations.$_.config.system.build.toplevel" })
Write-Host "Building $to_build"
$result_json = (&"@nom@/bin/nom" (@("build", "--no-link", "--json") + $to_build))
if (!$?) {
    Write-Error "nix build failed"
    exit 1
}
$results = $result_json | ConvertFrom-Json

foreach ($i in 0..($hosts.Length - 1)) {
    $hostconfig = $config
    ($hosts[$i]).Split(".") | % { $hostconfig = $hostconfig.$_ }

    $user = $hostconfig.targetUser
    $targetHost = $hostconfig.targetHost
    $substitute = if ($hostconfig.substituteOnDestination) { "-s" } else { "" }

    $storePath = ($results[$i]).outputs.out

    # Copy
    & "@nixFlakes@/bin/nix" copy -vL $substitute --to ssh://${user}@${targetHost} $storePath
    if (!$?) {
        Write-Error "Failed to copy configuration to $targetHost"
        exit 1
    }

    # Set profile
    $action = $args[1]
    if ($action -eq "switch" -or $action -eq "boot") {
        & "@openssh@/bin/ssh" -t ${user}@${targetHost} -- "${storePath}/sw/bin/nix-env -p /nix/var/nix/profiles/system --set $storePath"
        if (!$?) {
            Write-Error "Failed to set profile on $targetHost"
            exit 1
        }
    }

    # Activate
    & "@openssh@/bin/ssh" -t ${user}@${targetHost} -- ${storePath}/bin/switch-to-configuration $action
    if (!$?) {
        Write-Error "Failed to activate configuration on $targetHost"
        exit 1
    }
}
